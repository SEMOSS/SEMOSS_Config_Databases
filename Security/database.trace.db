2021-02-24 12:15:49 database: opening /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database (build 200)
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for WORKSPACEENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for WORKSPACEENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock WORKSPACEENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for WORKSPACEENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for WORKSPACEENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock WORKSPACEENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ASSETENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ASSETENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ASSETENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for ASSETENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for ASSETENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock ASSETENGINE 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for USER 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for USER 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock USER 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for PERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for PERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock PERMISSION 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:15:49 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:15:49 database: opened /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-02-24 12:15:49 database: connecting session #3 to /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-02-24 12:15:49 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2021-02-24 12:15:49 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:/Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database", "SA", "");
2021-02-24 12:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2021-02-24 12:15:49 jdbc[3]: 
/**/conn0.getClientInfo();
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs0 = dbMeta0.getClientInfoProperties();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs0.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs0.getString("NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs0.getInt("MAX_LEN");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs0.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs0.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/conn0.setClientInfo("ApplicationName", "DBeaver 7.3.0 - Main");
2021-02-24 12:15:49 jdbc[3]: 
/**/conn0.getClientInfo("ApplicationName");
2021-02-24 12:15:49 jdbc[3]: 
/**/conn0.getClientInfo();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2021-02-24 12:15:49 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@51a61b39]
2021-02-24 12:15:49 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@51a61b39
2021-02-24 12:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       : plan cost 9,901
2021-02-24 12:15:49 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2021-02-24 12:15:49 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2021-02-24 12:15:49 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2021-02-24 12:15:49 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs1 = prep0.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL l:78 #:4 t:7*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(2);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(2);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(2);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(2);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs1.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep0.close();
2021-02-24 12:15:49 jdbc[3]: exception
java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)
	at org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)
	at org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)
	at org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)
	at org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)
	at org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)
	at org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)
	at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
2021-02-24 12:15:49 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2021-02-24 12:15:49 jdbc[3]: 
/**/conn0.getAutoCommit();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT SCHEMA()");
2021-02-24 12:15:49 jdbc[3]: Plan       : calculate cost for plan [DUAL:0:org.h2.table.DualTable@23ed37ae]
2021-02-24 12:15:49 jdbc[3]: Plan       :   for table filter DUAL:0:org.h2.table.DualTable@23ed37ae
2021-02-24 12:15:49 jdbc[3]: Table      :     potential plan item cost 1 index dual index
2021-02-24 12:15:49 jdbc[3]: Plan       :   best plan item cost 1 index dual index
2021-02-24 12:15:49 jdbc[3]: Plan       : plan cost 2
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs2 = prep1.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL #:1*/SELECT SCHEMA();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs2.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs2.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs2.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep1.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getIdentifierQuoteString();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsCorrelatedSubqueries();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsMixedCaseIdentifiers();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsMixedCaseQuotedIdentifiers();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getSearchStringEscape();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInDataManipulation();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInProcedureCalls();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInIndexDefinitions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInPrivilegeDefinitions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsSchemasInDataManipulation();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsSchemasInProcedureCalls();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsSchemasInIndexDefinitions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsSchemasInPrivilegeDefinitions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getExtraNameCharacters();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getNumericFunctions();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:15:49 jdbc[3]: Plan       : calculate cost for plan [HELP:-8:org.h2.table.MetaTable@616cf60d]
2021-02-24 12:15:49 jdbc[3]: Plan       :   for table filter HELP:-8:org.h2.table.MetaTable@616cf60d
2021-02-24 12:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       : plan cost 9,901
2021-02-24 12:15:49 jdbc[3]: 
/**/prep2.setString(1, "Functions (Numeric)");
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL l:59 #:45 t:16*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (Numeric)'};
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs3.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep2.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep2.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getStringFunctions();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:15:49 jdbc[3]: 
/**/prep3.setString(1, "Functions (String)");
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs4 = prep3.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL l:59 #:43 t:5*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (String)'};
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs4.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep3.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep3.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getSystemFunctions();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:15:49 jdbc[3]: 
/**/prep4.setString(1, "Functions (System)");
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs5 = prep4.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL l:59 #:47 t:6*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (System)'};
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs5.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep4.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep4.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getTimeDateFunctions();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:15:49 jdbc[3]: 
/**/prep5.setString(1, "Functions (Time and Date)");
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs6 = prep5.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL l:59 #:25 t:3*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (Time and Date)'};
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.getString(1);
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs6.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep5.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep5.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDriverName();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getSchemaTerm();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getProcedureTerm();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.getCatalogTerm();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsTransactions();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-02-24 12:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta2.getTypeInfo();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2021-02-24 12:15:49 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@5b2231df]
2021-02-24 12:15:49 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@5b2231df
2021-02-24 12:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       : plan cost 10,001
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs7 = prep6.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL #:46 t:8*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs7.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep6.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta3 = conn0.getMetaData();
2021-02-24 12:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta4 = conn0.getMetaData();
2021-02-24 12:15:49 jdbc[3]: 
/**/dbMeta4.getSchemas();
2021-02-24 12:15:49 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2021-02-24 12:15:49 jdbc[3]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@31eda5cf]
2021-02-24 12:15:49 jdbc[3]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@31eda5cf
2021-02-24 12:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2021-02-24 12:15:49 jdbc[3]: Plan       : plan cost 10,001
2021-02-24 12:15:49 jdbc[3]: 
/**/ResultSet rs8 = prep7.executeQuery();
2021-02-24 12:15:49 jdbc[3]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.getString("TABLE_SCHEM");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.getString("TABLE_CATALOG");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.getString("TABLE_SCHEM");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.getString("TABLE_CATALOG");
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.next();
2021-02-24 12:15:49 jdbc[3]: 
/**/rs8.close();
2021-02-24 12:15:49 jdbc[3]: 
/**/prep7.close();
2021-02-24 12:15:52 jdbc[3]: 
/**/DatabaseMetaData dbMeta5 = conn0.getMetaData();
2021-02-24 12:15:52 jdbc[3]: 
/**/dbMeta5.getTables(null, "PUBLIC", "%", null);
2021-02-24 12:15:52 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [_0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter _0
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6bf481a0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6bf481a0
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6bf481a0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6bf481a0
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6bf481a0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6bf481a0
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 8,046 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4)))
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 8,047
2021-02-24 12:15:52 jdbc[3]: 
/**/prep8.setString(1, "%");
2021-02-24 12:15:52 jdbc[3]: 
/**/prep8.setString(2, "PUBLIC");
2021-02-24 12:15:52 jdbc[3]: 
/**/prep8.setString(3, "%");
2021-02-24 12:15:52 jdbc[3]: 
/**/prep8.setString(4, "\\");
2021-02-24 12:15:52 jdbc[3]: 
/**/ResultSet rs9 = prep8.executeQuery();
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [_1]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter _1
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6bf481a0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6bf481a0
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6bf481a0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6bf481a0
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@3cf7e6ba
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@6bf481a0]
2021-02-24 12:15:52 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@6bf481a0
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:52 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:52 jdbc[3]: Plan       :   best plan item cost 8,046 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4)))
2021-02-24 12:15:52 jdbc[3]: Plan       : plan cost 8,047
2021-02-24 12:15:52 jdbc[3]: 
/*SQL l:959 #:11 t:1*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\'};
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.next();
2021-02-24 12:15:52 jdbc[3]: 
/**/rs9.close();
2021-02-24 12:15:52 jdbc[3]: 
/**/prep8.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/DatabaseMetaData dbMeta6 = conn0.getMetaData();
2021-02-24 12:15:53 jdbc[3]: 
/**/dbMeta6.getColumns(null, "PUBLIC", "ENGINE", "%");
2021-02-24 12:15:53 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [_2]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter _2
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@104e9acb]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@104e9acb
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@104e9acb]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@104e9acb
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@104e9acb]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@104e9acb
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(1, "NO");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(2, "YES");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(3, "%");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(4, "PUBLIC");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(5, "ENGINE");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(6, "%");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.setString(7, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/ResultSet rs10 = prep9.executeQuery();
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [_3]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter _3
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@104e9acb]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@104e9acb
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@104e9acb]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@104e9acb
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@104e9acb]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@104e9acb
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:15:53 jdbc[3]: 
/*SQL l:2534 #:5 t:6*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION {1: 'NO', 2: 'YES', 3: '%', 4: 'PUBLIC', 5: 'ENGINE', 6: '%', 7: '\\'};
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.wasNull();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.wasNull();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.wasNull();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.wasNull();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.wasNull();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs10.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/prep9.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement(1003, 1007);
2021-02-24 12:15:53 jdbc[3]: 
/**/stat0.setMaxRows(200);
2021-02-24 12:15:53 jdbc[3]: 
/**/stat0.execute("SELECT * FROM PUBLIC.ENGINE");
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [PUBLIC.ENGINE]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter PUBLIC.ENGINE
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.ENGINE.tableScan
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 20,220 index PUBLIC.ENGINE_GLOBAL_INDEX
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 20,220 index PUBLIC.ENGINE_ENGINENAME_INDEX
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 20,220 index PUBLIC.ENGINE_ENGINEID_INDEX
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 10,200 index PUBLIC.ENGINE.tableScan
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 10,201
2021-02-24 12:15:53 jdbc[3]: 
/*SQL */SELECT * FROM PUBLIC.ENGINE;
2021-02-24 12:15:53 jdbc[3]: 
/**/ResultSet rs11 = stat0.getResultSet();
2021-02-24 12:15:53 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs11.getMetaData();
2021-02-24 12:15:53 jdbc[3]: 
/**/conn0.getCatalog();
2021-02-24 12:15:53 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnLabel(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnName(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isWritable(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getTableName(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getCatalogName(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getSchemaName(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isNullable(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnType(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getPrecision(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getScale(1);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnLabel(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnName(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isWritable(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getTableName(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getCatalogName(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getSchemaName(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isNullable(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnType(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getPrecision(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getScale(2);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnLabel(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnName(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isWritable(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getTableName(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getCatalogName(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getSchemaName(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isNullable(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnType(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getPrecision(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getScale(3);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnLabel(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnName(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isWritable(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getTableName(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getCatalogName(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getSchemaName(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isNullable(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnType(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getPrecision(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getScale(4);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnLabel(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnName(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isWritable(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getTableName(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getCatalogName(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getSchemaName(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isNullable(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getColumnType(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getPrecision(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rsMeta0.getScale(5);
2021-02-24 12:15:53 jdbc[3]: 
/**/rs11.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs11.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/DatabaseMetaData dbMeta7 = conn0.getMetaData();
2021-02-24 12:15:53 jdbc[3]: 
/**/dbMeta7.getIndexInfo(null, "PUBLIC", "ENGINE", false, true);
2021-02-24 12:15:53 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@b3cd757]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@b3cd757
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 324.72 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 325.72
2021-02-24 12:15:53 jdbc[3]: 
/**/prep10.setString(1, "%");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep10.setString(2, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep10.setString(3, "PUBLIC");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep10.setString(4, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep10.setString(5, "ENGINE");
2021-02-24 12:15:53 jdbc[3]: 
/**/ResultSet rs12 = prep10.executeQuery();
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@b3cd757]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@b3cd757
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:15:53 jdbc[3]: 
/*SQL l:433 #:3*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ENGINE'};
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("INDEX_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getBoolean("NON_UNIQUE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("INDEX_QUALIFIER");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getLong("CARDINALITY");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getInt("TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("ASC_OR_DESC");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("INDEX_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getBoolean("NON_UNIQUE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("INDEX_QUALIFIER");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getLong("CARDINALITY");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getInt("TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("ASC_OR_DESC");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("INDEX_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getBoolean("NON_UNIQUE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("INDEX_QUALIFIER");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getLong("CARDINALITY");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getInt("TYPE");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getInt("ORDINAL_POSITION");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.getString("ASC_OR_DESC");
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs12.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/prep10.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/DatabaseMetaData dbMeta8 = conn0.getMetaData();
2021-02-24 12:15:53 jdbc[3]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "ENGINE");
2021-02-24 12:15:53 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@b3cd757]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@b3cd757
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:15:53 jdbc[3]: 
/**/prep11.setString(1, "%");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep11.setString(2, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep11.setString(3, "PUBLIC");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep11.setString(4, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep11.setString(5, "ENGINE");
2021-02-24 12:15:53 jdbc[3]: 
/**/ResultSet rs13 = prep11.executeQuery();
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@b3cd757]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@b3cd757
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 318.16 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 319.16
2021-02-24 12:15:53 jdbc[3]: 
/*SQL l:316*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ENGINE'};
2021-02-24 12:15:53 jdbc[3]: 
/**/rs13.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs13.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/prep11.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/DatabaseMetaData dbMeta9 = conn0.getMetaData();
2021-02-24 12:15:53 jdbc[3]: 
/**/dbMeta9.getImportedKeys(null, "PUBLIC", "ENGINE");
2021-02-24 12:15:53 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ");
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@6a204c6e]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@6a204c6e
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,278.78 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,279.78
2021-02-24 12:15:53 jdbc[3]: 
/**/prep12.setString(1, "%");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep12.setString(2, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep12.setString(3, "PUBLIC");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep12.setString(4, "\\");
2021-02-24 12:15:53 jdbc[3]: 
/**/prep12.setString(5, "ENGINE");
2021-02-24 12:15:53 jdbc[3]: 
/**/ResultSet rs14 = prep12.executeQuery();
2021-02-24 12:15:53 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@6a204c6e]
2021-02-24 12:15:53 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@6a204c6e
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:15:53 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       :   best plan item cost 4,235.56 index meta
2021-02-24 12:15:53 jdbc[3]: Plan       : plan cost 4,236.56
2021-02-24 12:15:53 jdbc[3]: 
/*SQL l:482*/SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ENGINE'};
2021-02-24 12:15:53 jdbc[3]: 
/**/rs14.next();
2021-02-24 12:15:53 jdbc[3]: 
/**/rs14.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/prep12.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/stat0.close();
2021-02-24 12:15:53 jdbc[3]: 
/**/conn0.getWarnings();
2021-02-24 12:15:53 jdbc[3]: 
/**/conn0.clearWarnings();
2021-02-24 12:15:53 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2021-02-24 12:16:09 jdbc[3]: 
/**/Statement stat1 = conn0.createStatement();
2021-02-24 12:16:09 jdbc[3]: 
/**/stat1.execute("shutdown");
2021-02-24 12:16:09 lock: 3 shared read lock unlock SYS 
2021-02-24 12:16:09 database: disconnecting session #3
2021-02-24 12:16:09 database: closing /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-02-24 12:16:10 lock: 1 shared read lock unlock SYS 
2021-02-24 12:16:10 lock: 2 shared read lock unlock SYS 
2021-02-24 12:16:10 database: closed
2021-02-24 12:16:10 database: disconnected session #3
2021-02-24 12:16:10 command: slow query: 221 ms
2021-02-24 12:16:10 jdbc[3]: 
/**/stat1.close();
2021-02-24 12:16:10 jdbc[3]: 
/**/conn0.isClosed();
2021-02-24 12:16:10 jdbc[3]: 
/**/conn0.close();
2021-02-24 12:16:26 database: opening /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database (build 200)
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for WORKSPACEENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for WORKSPACEENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock WORKSPACEENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for WORKSPACEENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for WORKSPACEENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock WORKSPACEENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ASSETENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ASSETENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ASSETENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for ASSETENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for ASSETENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock ASSETENGINE 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock INSIGHT 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for USER 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for USER 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock USER 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for PERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for PERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock PERMISSION 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock requesting for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock added for SYS 
2021-02-24 12:16:26 lock: 1 exclusive write lock unlock SYS 
2021-02-24 12:16:26 database: opened /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-02-24 12:16:26 database: connecting session #3 to /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-02-24 12:16:26 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2021-02-24 12:16:26 jdbc[3]: 
/**/Connection conn1 = DriverManager.getConnection("jdbc:h2:/Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database", "SA", "");
2021-02-24 12:16:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta10 = conn1.getMetaData();
2021-02-24 12:16:26 jdbc[3]: 
/**/conn1.getClientInfo();
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs16 = dbMeta10.getClientInfoProperties();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs16.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs16.getString("NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs16.getInt("MAX_LEN");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs16.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs16.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/conn1.setClientInfo("ApplicationName", "DBeaver 7.3.0 - Main");
2021-02-24 12:16:26 jdbc[3]: 
/**/conn1.getClientInfo("ApplicationName");
2021-02-24 12:16:26 jdbc[3]: 
/**/conn1.getClientInfo();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep13 = conn1.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2021-02-24 12:16:26 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@3a59de9d]
2021-02-24 12:16:26 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@3a59de9d
2021-02-24 12:16:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       : plan cost 9,901
2021-02-24 12:16:26 jdbc[3]: 
/**/prep13.setString(1, "MODE");
2021-02-24 12:16:26 jdbc[3]: 
/**/prep13.setString(2, "DATABASE_TO_UPPER");
2021-02-24 12:16:26 jdbc[3]: 
/**/prep13.setString(3, "DATABASE_TO_LOWER");
2021-02-24 12:16:26 jdbc[3]: 
/**/prep13.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs17 = prep13.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL l:78 #:4*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(2);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(2);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(2);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(2);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs17.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep13.close();
2021-02-24 12:16:26 jdbc[3]: exception
java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)
	at org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)
	at org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)
	at org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)
	at org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)
	at org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)
	at org.jkiss.dbeaver.runtime.jobs.ConnectJob.run(ConnectJob.java:70)
	at org.jkiss.dbeaver.runtime.jobs.ConnectJob.runSync(ConnectJob.java:98)
	at org.jkiss.dbeaver.ui.actions.datasource.DataSourceHandler.connectToDataSource(DataSourceHandler.java:106)
	at org.jkiss.dbeaver.ui.actions.datasource.UIServiceConnectionsImpl.initConnection(UIServiceConnectionsImpl.java:65)
	at org.jkiss.dbeaver.model.navigator.DBNDataSource.initializeNode(DBNDataSource.java:157)
	at org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:203)
	at org.jkiss.dbeaver.model.navigator.DBNDatabaseNode.getChildren(DBNDatabaseNode.java:1)
	at org.jkiss.dbeaver.model.navigator.DBNUtils.getNodeChildrenFiltered(DBNUtils.java:70)
	at org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:49)
	at org.jkiss.dbeaver.ui.navigator.database.load.TreeLoadService.evaluate(TreeLoadService.java:1)
	at org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)
	at org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)
	at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
2021-02-24 12:16:26 jdbc[3]: 
/**/conn1.setAutoCommit(true);
2021-02-24 12:16:26 jdbc[3]: 
/**/conn1.getAutoCommit();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep14 = conn1.prepareStatement("SELECT SCHEMA()");
2021-02-24 12:16:26 jdbc[3]: Plan       : calculate cost for plan [DUAL:0:org.h2.table.DualTable@64348a74]
2021-02-24 12:16:26 jdbc[3]: Plan       :   for table filter DUAL:0:org.h2.table.DualTable@64348a74
2021-02-24 12:16:26 jdbc[3]: Table      :     potential plan item cost 1 index dual index
2021-02-24 12:16:26 jdbc[3]: Plan       :   best plan item cost 1 index dual index
2021-02-24 12:16:26 jdbc[3]: Plan       : plan cost 2
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs18 = prep14.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL #:1*/SELECT SCHEMA();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs18.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs18.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs18.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep14.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta11 = conn1.getMetaData();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDatabaseMajorVersion();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDatabaseMinorVersion();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getIdentifierQuoteString();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getSQLStateType();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsCorrelatedSubqueries();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsMixedCaseIdentifiers();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsMixedCaseQuotedIdentifiers();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.storesUpperCaseIdentifiers();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.storesUpperCaseQuotedIdentifiers();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.storesLowerCaseQuotedIdentifiers();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getSearchStringEscape();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getCatalogSeparator();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsCatalogsInDataManipulation();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsCatalogsInTableDefinitions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsCatalogsInProcedureCalls();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsCatalogsInIndexDefinitions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsCatalogsInPrivilegeDefinitions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsSchemasInDataManipulation();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsSchemasInTableDefinitions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsSchemasInProcedureCalls();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsSchemasInIndexDefinitions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsSchemasInPrivilegeDefinitions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getExtraNameCharacters();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.isCatalogAtStart();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getSQLKeywords();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getNumericFunctions();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep15 = conn1.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:16:26 jdbc[3]: Plan       : calculate cost for plan [HELP:-8:org.h2.table.MetaTable@106d1d59]
2021-02-24 12:16:26 jdbc[3]: Plan       :   for table filter HELP:-8:org.h2.table.MetaTable@106d1d59
2021-02-24 12:16:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       : plan cost 9,901
2021-02-24 12:16:26 jdbc[3]: 
/**/prep15.setString(1, "Functions (Numeric)");
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs19 = prep15.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL l:59 #:45 t:1*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (Numeric)'};
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs19.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep15.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep15.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getStringFunctions();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep16 = conn1.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:16:26 jdbc[3]: 
/**/prep16.setString(1, "Functions (String)");
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs20 = prep16.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL l:59 #:43 t:1*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (String)'};
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs20.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep16.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep16.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getSystemFunctions();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep17 = conn1.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:16:26 jdbc[3]: 
/**/prep17.setString(1, "Functions (System)");
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs21 = prep17.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL l:59 #:47 t:1*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (System)'};
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs21.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep17.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep17.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getTimeDateFunctions();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep18 = conn1.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-02-24 12:16:26 jdbc[3]: 
/**/prep18.setString(1, "Functions (Time and Date)");
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs22 = prep18.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL l:59 #:25 t:2*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (Time and Date)'};
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.getString(1);
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs22.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep18.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep18.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDatabaseProductName();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDatabaseProductVersion();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDriverName();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDriverVersion();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDatabaseMajorVersion();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getDatabaseMinorVersion();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getSchemaTerm();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getProcedureTerm();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.getCatalogTerm();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsBatchUpdates();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsTransactions();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsTransactionIsolationLevel();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsTransactionIsolationLevel();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsTransactionIsolationLevel();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsTransactionIsolationLevel();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta11.supportsTransactionIsolationLevel();
2021-02-24 12:16:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta12 = conn1.getMetaData();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta12.getTypeInfo();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep19 = conn1.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2021-02-24 12:16:26 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@2cbe12a5]
2021-02-24 12:16:26 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@2cbe12a5
2021-02-24 12:16:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       : plan cost 10,001
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs23 = prep19.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL #:46*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("DATA_TYPE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getString("LOCAL_TYPE_NAME");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getBoolean("UNSIGNED_ATTRIBUTE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("SEARCHABLE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("PRECISION");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MINIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.getInt("MAXIMUM_SCALE");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs23.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep19.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta13 = conn1.getMetaData();
2021-02-24 12:16:26 jdbc[3]: 
/**/DatabaseMetaData dbMeta14 = conn1.getMetaData();
2021-02-24 12:16:26 jdbc[3]: 
/**/dbMeta14.getSchemas();
2021-02-24 12:16:26 jdbc[3]: 
/**/PreparedStatement prep20 = conn1.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2021-02-24 12:16:26 jdbc[3]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@47f64ef5]
2021-02-24 12:16:26 jdbc[3]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@47f64ef5
2021-02-24 12:16:26 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2021-02-24 12:16:26 jdbc[3]: Plan       : plan cost 10,001
2021-02-24 12:16:26 jdbc[3]: 
/**/ResultSet rs24 = prep20.executeQuery();
2021-02-24 12:16:26 jdbc[3]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.getString("TABLE_SCHEM");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.getString("TABLE_CATALOG");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.getString("TABLE_SCHEM");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.getString("TABLE_CATALOG");
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.next();
2021-02-24 12:16:26 jdbc[3]: 
/**/rs24.close();
2021-02-24 12:16:26 jdbc[3]: 
/**/prep20.close();
2021-02-24 12:16:29 jdbc[3]: 
/**/DatabaseMetaData dbMeta15 = conn1.getMetaData();
2021-02-24 12:16:29 jdbc[3]: 
/**/dbMeta15.getTables(null, "PUBLIC", "%", null);
2021-02-24 12:16:29 jdbc[3]: 
/**/PreparedStatement prep21 = conn1.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [_0]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter _0
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1eedbe3c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1eedbe3c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1eedbe3c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1eedbe3c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1eedbe3c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1eedbe3c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 8,046 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4)))
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 8,047
2021-02-24 12:16:29 jdbc[3]: 
/**/prep21.setString(1, "%");
2021-02-24 12:16:29 jdbc[3]: 
/**/prep21.setString(2, "PUBLIC");
2021-02-24 12:16:29 jdbc[3]: 
/**/prep21.setString(3, "%");
2021-02-24 12:16:29 jdbc[3]: 
/**/prep21.setString(4, "\\");
2021-02-24 12:16:29 jdbc[3]: 
/**/ResultSet rs25 = prep21.executeQuery();
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [_1]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter _1
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1eedbe3c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1eedbe3c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1eedbe3c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1eedbe3c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@5c0ab28c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@1eedbe3c]
2021-02-24 12:16:29 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@1eedbe3c
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:29 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:29 jdbc[3]: Plan       :   best plan item cost 8,046 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4)))
2021-02-24 12:16:29 jdbc[3]: Plan       : plan cost 8,047
2021-02-24 12:16:29 jdbc[3]: 
/**/conn1.getTransactionIsolation();
2021-02-24 12:16:29 jdbc[3]: 
/*SQL l:959 #:11 t:1*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\'};
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_NAME");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_TYPE");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("TABLE_SCHEM");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.getString("REMARKS");
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.next();
2021-02-24 12:16:29 jdbc[3]: 
/**/rs25.close();
2021-02-24 12:16:29 jdbc[3]: 
/**/prep21.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/DatabaseMetaData dbMeta16 = conn1.getMetaData();
2021-02-24 12:16:32 jdbc[3]: 
/**/dbMeta16.getColumns(null, "PUBLIC", "ASSETENGINE", "%");
2021-02-24 12:16:32 jdbc[3]: 
/**/PreparedStatement prep22 = conn1.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [_2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter _2
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(1, "NO");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(2, "YES");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(3, "%");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(4, "PUBLIC");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(5, "ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(6, "%");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.setString(7, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/ResultSet rs26 = prep22.executeQuery();
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [_3]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter _3
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:16:32 jdbc[3]: 
/*SQL l:2534 #:3 t:3*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION {1: 'NO', 2: 'YES', 3: '%', 4: 'PUBLIC', 5: 'ASSETENGINE', 6: '%', 7: '\\'};
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("COLUMN_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("DATA_TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("TYPE_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getLong("COLUMN_SIZE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("NULLABLE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.wasNull();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("COLUMN_DEF");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("REMARKS");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("COLUMN_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("DATA_TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("TYPE_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getLong("COLUMN_SIZE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("NULLABLE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.wasNull();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("COLUMN_DEF");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("REMARKS");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("COLUMN_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("DATA_TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("TYPE_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getLong("COLUMN_SIZE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("NULLABLE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.wasNull();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("COLUMN_DEF");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("REMARKS");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getInt("ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs26.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/prep22.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/Statement stat2 = conn1.createStatement(1003, 1007);
2021-02-24 12:16:32 jdbc[3]: 
/**/stat2.setMaxRows(200);
2021-02-24 12:16:32 jdbc[3]: 
/**/stat2.execute("SELECT * FROM PUBLIC.ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [PUBLIC.ASSETENGINE]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter PUBLIC.ASSETENGINE
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.ASSETENGINE.tableScan
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 20,220 index PUBLIC.ASSETENGINE_TYPE_INDEX
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 20,220 index PUBLIC.ASSETENGINE_USERID_INDEX
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 10,200 index PUBLIC.ASSETENGINE.tableScan
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 10,201
2021-02-24 12:16:32 jdbc[3]: 
/*SQL */SELECT * FROM PUBLIC.ASSETENGINE;
2021-02-24 12:16:32 jdbc[3]: 
/**/ResultSet rs27 = stat2.getResultSet();
2021-02-24 12:16:32 jdbc[3]: 
/**/ResultSetMetaData rsMeta1 = rs27.getMetaData();
2021-02-24 12:16:32 jdbc[3]: 
/**/conn1.getCatalog();
2021-02-24 12:16:32 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnCount();
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnLabel(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnName(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isWritable(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getTableName(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getCatalogName(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getSchemaName(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isNullable(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnDisplaySize(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnTypeName(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnType(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isAutoIncrement(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getPrecision(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getScale(1);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnLabel(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnName(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isWritable(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getTableName(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getCatalogName(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getSchemaName(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isNullable(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnDisplaySize(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnTypeName(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnType(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isAutoIncrement(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getPrecision(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getScale(2);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnLabel(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnName(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isWritable(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getTableName(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getCatalogName(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getSchemaName(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isNullable(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnDisplaySize(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnTypeName(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getColumnType(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.isAutoIncrement(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getPrecision(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rsMeta1.getScale(3);
2021-02-24 12:16:32 jdbc[3]: 
/**/rs27.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs27.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/DatabaseMetaData dbMeta17 = conn1.getMetaData();
2021-02-24 12:16:32 jdbc[3]: 
/**/dbMeta17.getIndexInfo(null, "PUBLIC", "ASSETENGINE", false, true);
2021-02-24 12:16:32 jdbc[3]: 
/**/PreparedStatement prep23 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 324.72 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 325.72
2021-02-24 12:16:32 jdbc[3]: 
/**/prep23.setString(1, "%");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep23.setString(2, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep23.setString(3, "PUBLIC");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep23.setString(4, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep23.setString(5, "ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: 
/**/ResultSet rs28 = prep23.executeQuery();
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:16:32 jdbc[3]: 
/*SQL l:433 #:2*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ASSETENGINE'};
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("INDEX_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getBoolean("NON_UNIQUE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("INDEX_QUALIFIER");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getLong("CARDINALITY");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getInt("TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getInt("ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("COLUMN_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("ASC_OR_DESC");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("INDEX_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getBoolean("NON_UNIQUE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("INDEX_QUALIFIER");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getLong("CARDINALITY");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getInt("TYPE");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getInt("ORDINAL_POSITION");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("COLUMN_NAME");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.getString("ASC_OR_DESC");
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs28.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/prep23.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/DatabaseMetaData dbMeta18 = conn1.getMetaData();
2021-02-24 12:16:32 jdbc[3]: 
/**/dbMeta18.getPrimaryKeys(null, "PUBLIC", "ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: 
/**/PreparedStatement prep24 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:16:32 jdbc[3]: 
/**/prep24.setString(1, "%");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep24.setString(2, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep24.setString(3, "PUBLIC");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep24.setString(4, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep24.setString(5, "ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: 
/**/ResultSet rs29 = prep24.executeQuery();
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 318.16 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 319.16
2021-02-24 12:16:32 jdbc[3]: 
/*SQL l:316*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ASSETENGINE'};
2021-02-24 12:16:32 jdbc[3]: 
/**/rs29.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs29.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/prep24.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/DatabaseMetaData dbMeta19 = conn1.getMetaData();
2021-02-24 12:16:32 jdbc[3]: 
/**/dbMeta19.getImportedKeys(null, "PUBLIC", "ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: 
/**/PreparedStatement prep25 = conn1.prepareStatement("SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ");
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,278.78 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,279.78
2021-02-24 12:16:32 jdbc[3]: 
/**/prep25.setString(1, "%");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep25.setString(2, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep25.setString(3, "PUBLIC");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep25.setString(4, "\\");
2021-02-24 12:16:32 jdbc[3]: 
/**/prep25.setString(5, "ASSETENGINE");
2021-02-24 12:16:32 jdbc[3]: 
/**/ResultSet rs30 = prep25.executeQuery();
2021-02-24 12:16:32 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918]
2021-02-24 12:16:32 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:32 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       :   best plan item cost 4,235.56 index meta
2021-02-24 12:16:32 jdbc[3]: Plan       : plan cost 4,236.56
2021-02-24 12:16:32 jdbc[3]: 
/*SQL l:482*/SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ASSETENGINE'};
2021-02-24 12:16:32 jdbc[3]: 
/**/rs30.next();
2021-02-24 12:16:32 jdbc[3]: 
/**/rs30.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/prep25.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/stat2.close();
2021-02-24 12:16:32 jdbc[3]: 
/**/conn1.getWarnings();
2021-02-24 12:16:32 jdbc[3]: 
/**/conn1.clearWarnings();
2021-02-24 12:16:34 jdbc[3]: 
/**/DatabaseMetaData dbMeta20 = conn1.getMetaData();
2021-02-24 12:16:34 jdbc[3]: 
/**/dbMeta20.getColumns(null, "PUBLIC", "ENGINEMETA", "%");
2021-02-24 12:16:34 jdbc[3]: 
/**/PreparedStatement prep26 = conn1.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(1, "NO");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(2, "YES");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(3, "%");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(4, "PUBLIC");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(5, "ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(6, "%");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.setString(7, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/ResultSet rs31 = prep26.executeQuery();
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [_4]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter _4
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:16:34 jdbc[3]: 
/*SQL l:2534 #:4 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION {1: 'NO', 2: 'YES', 3: '%', 4: 'PUBLIC', 5: 'ENGINEMETA', 6: '%', 7: '\\'};
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("TYPE_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("COLUMN_SIZE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NULLABLE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.wasNull();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_DEF");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("REMARKS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("ORDINAL_POSITION");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("TYPE_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("COLUMN_SIZE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NULLABLE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.wasNull();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_DEF");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("REMARKS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("ORDINAL_POSITION");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("TYPE_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("COLUMN_SIZE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NULLABLE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.wasNull();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_DEF");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("REMARKS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("ORDINAL_POSITION");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("TYPE_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("COLUMN_SIZE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NULLABLE");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.wasNull();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("COLUMN_DEF");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("REMARKS");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getInt("ORDINAL_POSITION");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs31.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/prep26.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/Statement stat3 = conn1.createStatement(1003, 1007);
2021-02-24 12:16:34 jdbc[3]: 
/**/stat3.setMaxRows(200);
2021-02-24 12:16:34 jdbc[3]: 
/**/stat3.execute("SELECT * FROM PUBLIC.ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [PUBLIC.ENGINEMETA]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter PUBLIC.ENGINEMETA
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.ENGINEMETA.tableScan
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 10,200 index PUBLIC.ENGINEMETA.tableScan
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 10,201
2021-02-24 12:16:34 jdbc[3]: 
/*SQL */SELECT * FROM PUBLIC.ENGINEMETA;
2021-02-24 12:16:34 jdbc[3]: 
/**/ResultSet rs32 = stat3.getResultSet();
2021-02-24 12:16:34 jdbc[3]: 
/**/ResultSetMetaData rsMeta2 = rs32.getMetaData();
2021-02-24 12:16:34 jdbc[3]: 
/**/conn1.getCatalog();
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnCount();
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnLabel(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnName(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isWritable(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getTableName(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getCatalogName(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getSchemaName(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isNullable(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnDisplaySize(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnTypeName(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnType(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isAutoIncrement(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getPrecision(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getScale(1);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnLabel(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnName(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isWritable(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getTableName(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getCatalogName(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getSchemaName(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isNullable(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnDisplaySize(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnTypeName(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnType(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isAutoIncrement(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getPrecision(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getScale(2);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnLabel(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnName(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isWritable(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getTableName(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getCatalogName(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getSchemaName(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isNullable(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnDisplaySize(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnTypeName(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnType(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isAutoIncrement(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getPrecision(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getScale(3);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnLabel(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnName(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isWritable(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getTableName(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getCatalogName(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getSchemaName(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isNullable(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnDisplaySize(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnTypeName(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getColumnType(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.isAutoIncrement(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getPrecision(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rsMeta2.getScale(4);
2021-02-24 12:16:34 jdbc[3]: 
/**/rs32.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs32.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/DatabaseMetaData dbMeta21 = conn1.getMetaData();
2021-02-24 12:16:34 jdbc[3]: 
/**/dbMeta21.getIndexInfo(null, "PUBLIC", "ENGINEMETA", false, true);
2021-02-24 12:16:34 jdbc[3]: 
/**/PreparedStatement prep27 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep27.setString(1, "%");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep27.setString(2, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep27.setString(3, "PUBLIC");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep27.setString(4, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep27.setString(5, "ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: 
/**/ResultSet rs33 = prep27.executeQuery();
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:16:34 jdbc[3]: 
/*SQL l:433*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ENGINEMETA'};
2021-02-24 12:16:34 jdbc[3]: 
/**/rs33.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs33.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/prep27.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/DatabaseMetaData dbMeta22 = conn1.getMetaData();
2021-02-24 12:16:34 jdbc[3]: 
/**/dbMeta22.getPrimaryKeys(null, "PUBLIC", "ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: 
/**/PreparedStatement prep28 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep28.setString(1, "%");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep28.setString(2, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep28.setString(3, "PUBLIC");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep28.setString(4, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep28.setString(5, "ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: 
/**/ResultSet rs34 = prep28.executeQuery();
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 318.16 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 319.16
2021-02-24 12:16:34 jdbc[3]: 
/*SQL l:316*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ENGINEMETA'};
2021-02-24 12:16:34 jdbc[3]: 
/**/rs34.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs34.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/prep28.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/DatabaseMetaData dbMeta23 = conn1.getMetaData();
2021-02-24 12:16:34 jdbc[3]: 
/**/dbMeta23.getImportedKeys(null, "PUBLIC", "ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: 
/**/PreparedStatement prep29 = conn1.prepareStatement("SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep29.setString(1, "%");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep29.setString(2, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep29.setString(3, "PUBLIC");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep29.setString(4, "\\");
2021-02-24 12:16:34 jdbc[3]: 
/**/prep29.setString(5, "ENGINEMETA");
2021-02-24 12:16:34 jdbc[3]: 
/**/ResultSet rs35 = prep29.executeQuery();
2021-02-24 12:16:34 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918]
2021-02-24 12:16:34 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:34 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       :   best plan item cost 4,235.56 index meta
2021-02-24 12:16:34 jdbc[3]: Plan       : plan cost 4,236.56
2021-02-24 12:16:34 jdbc[3]: 
/*SQL l:482*/SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'ENGINEMETA'};
2021-02-24 12:16:34 jdbc[3]: 
/**/rs35.next();
2021-02-24 12:16:34 jdbc[3]: 
/**/rs35.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/prep29.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/stat3.close();
2021-02-24 12:16:34 jdbc[3]: 
/**/conn1.getWarnings();
2021-02-24 12:16:34 jdbc[3]: 
/**/conn1.clearWarnings();
2021-02-24 12:16:35 jdbc[3]: 
/**/DatabaseMetaData dbMeta24 = conn1.getMetaData();
2021-02-24 12:16:35 jdbc[3]: 
/**/dbMeta24.getColumns(null, "PUBLIC", "INSIGHTMETA", "%");
2021-02-24 12:16:35 jdbc[3]: 
/**/PreparedStatement prep30 = conn1.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(1, "NO");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(2, "YES");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(3, "%");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(4, "PUBLIC");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(5, "INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(6, "%");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.setString(7, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/ResultSet rs36 = prep30.executeQuery();
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [_5]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter _5
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:16:35 jdbc[3]: 
/*SQL l:2534 #:5 t:1*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION {1: 'NO', 2: 'YES', 3: '%', 4: 'PUBLIC', 5: 'INSIGHTMETA', 6: '%', 7: '\\'};
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("TYPE_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("COLUMN_SIZE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NULLABLE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.wasNull();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_DEF");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("REMARKS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("TYPE_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("COLUMN_SIZE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NULLABLE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.wasNull();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_DEF");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("REMARKS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("TYPE_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("COLUMN_SIZE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NULLABLE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.wasNull();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_DEF");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("REMARKS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("TYPE_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("COLUMN_SIZE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NULLABLE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.wasNull();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_DEF");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("REMARKS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("TYPE_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("COLUMN_SIZE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NULLABLE");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.wasNull();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("COLUMN_DEF");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("REMARKS");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getInt("ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs36.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/prep30.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/Statement stat4 = conn1.createStatement(1003, 1007);
2021-02-24 12:16:35 jdbc[3]: 
/**/stat4.setMaxRows(200);
2021-02-24 12:16:35 jdbc[3]: 
/**/stat4.execute("SELECT * FROM PUBLIC.INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [PUBLIC.INSIGHTMETA]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter PUBLIC.INSIGHTMETA
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,200 index PUBLIC.INSIGHTMETA.tableScan
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 10,200 index PUBLIC.INSIGHTMETA.tableScan
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 10,201
2021-02-24 12:16:35 jdbc[3]: 
/*SQL */SELECT * FROM PUBLIC.INSIGHTMETA;
2021-02-24 12:16:35 jdbc[3]: 
/**/ResultSet rs37 = stat4.getResultSet();
2021-02-24 12:16:35 jdbc[3]: 
/**/ResultSetMetaData rsMeta3 = rs37.getMetaData();
2021-02-24 12:16:35 jdbc[3]: 
/**/conn1.getCatalog();
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnCount();
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnLabel(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnName(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isWritable(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getTableName(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getCatalogName(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getSchemaName(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isNullable(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnDisplaySize(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnTypeName(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnType(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isAutoIncrement(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getPrecision(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getScale(1);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnLabel(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnName(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isWritable(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getTableName(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getCatalogName(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getSchemaName(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isNullable(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnDisplaySize(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnTypeName(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnType(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isAutoIncrement(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getPrecision(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getScale(2);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnLabel(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnName(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isWritable(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getTableName(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getCatalogName(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getSchemaName(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isNullable(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnDisplaySize(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnTypeName(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnType(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isAutoIncrement(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getPrecision(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getScale(3);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnLabel(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnName(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isWritable(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getTableName(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getCatalogName(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getSchemaName(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isNullable(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnDisplaySize(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnTypeName(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnType(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isAutoIncrement(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getPrecision(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getScale(4);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnLabel(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnName(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isWritable(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getTableName(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getCatalogName(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getSchemaName(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isNullable(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnDisplaySize(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnTypeName(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getColumnType(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.isAutoIncrement(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getPrecision(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rsMeta3.getScale(5);
2021-02-24 12:16:35 jdbc[3]: 
/**/rs37.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs37.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/DatabaseMetaData dbMeta25 = conn1.getMetaData();
2021-02-24 12:16:35 jdbc[3]: 
/**/dbMeta25.getIndexInfo(null, "PUBLIC", "INSIGHTMETA", false, true);
2021-02-24 12:16:35 jdbc[3]: 
/**/PreparedStatement prep31 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep31.setString(1, "%");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep31.setString(2, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep31.setString(3, "PUBLIC");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep31.setString(4, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep31.setString(5, "INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: 
/**/ResultSet rs38 = prep31.executeQuery();
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:16:35 jdbc[3]: 
/*SQL l:433*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'INSIGHTMETA'};
2021-02-24 12:16:35 jdbc[3]: 
/**/rs38.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs38.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/prep31.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/DatabaseMetaData dbMeta26 = conn1.getMetaData();
2021-02-24 12:16:35 jdbc[3]: 
/**/dbMeta26.getPrimaryKeys(null, "PUBLIC", "INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: 
/**/PreparedStatement prep32 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep32.setString(1, "%");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep32.setString(2, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep32.setString(3, "PUBLIC");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep32.setString(4, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep32.setString(5, "INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: 
/**/ResultSet rs39 = prep32.executeQuery();
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 318.16 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 319.16
2021-02-24 12:16:35 jdbc[3]: 
/*SQL l:316*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'INSIGHTMETA'};
2021-02-24 12:16:35 jdbc[3]: 
/**/rs39.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs39.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/prep32.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/DatabaseMetaData dbMeta27 = conn1.getMetaData();
2021-02-24 12:16:35 jdbc[3]: 
/**/dbMeta27.getImportedKeys(null, "PUBLIC", "INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: 
/**/PreparedStatement prep33 = conn1.prepareStatement("SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep33.setString(1, "%");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep33.setString(2, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep33.setString(3, "PUBLIC");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep33.setString(4, "\\");
2021-02-24 12:16:35 jdbc[3]: 
/**/prep33.setString(5, "INSIGHTMETA");
2021-02-24 12:16:35 jdbc[3]: 
/**/ResultSet rs40 = prep33.executeQuery();
2021-02-24 12:16:35 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918]
2021-02-24 12:16:35 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:35 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       :   best plan item cost 4,235.56 index meta
2021-02-24 12:16:35 jdbc[3]: Plan       : plan cost 4,236.56
2021-02-24 12:16:35 jdbc[3]: 
/*SQL l:482*/SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'INSIGHTMETA'};
2021-02-24 12:16:35 jdbc[3]: 
/**/rs40.next();
2021-02-24 12:16:35 jdbc[3]: 
/**/rs40.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/prep33.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/stat4.close();
2021-02-24 12:16:35 jdbc[3]: 
/**/conn1.getWarnings();
2021-02-24 12:16:35 jdbc[3]: 
/**/conn1.clearWarnings();
2021-02-24 12:16:36 jdbc[3]: 
/**/DatabaseMetaData dbMeta28 = conn1.getMetaData();
2021-02-24 12:16:36 jdbc[3]: 
/**/dbMeta28.getColumns(null, "PUBLIC", "PERMISSION", "%");
2021-02-24 12:16:36 jdbc[3]: 
/**/PreparedStatement prep34 = conn1.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(1, "NO");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(2, "YES");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(3, "%");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(4, "PUBLIC");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(5, "PERMISSION");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(6, "%");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.setString(7, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/ResultSet rs41 = prep34.executeQuery();
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [_6]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter _6
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 113,230.323
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter C
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter S
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@467b4cd2]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@467b4cd2
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 4,023
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 117,254.323
2021-02-24 12:16:36 jdbc[3]: 
/*SQL l:2534 #:2 t:2*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION {1: 'NO', 2: 'YES', 3: '%', 4: 'PUBLIC', 5: 'PERMISSION', 6: '%', 7: '\\'};
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("COLUMN_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("DATA_TYPE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("TYPE_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getLong("COLUMN_SIZE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("NULLABLE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.wasNull();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("COLUMN_DEF");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("REMARKS");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("ORDINAL_POSITION");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("COLUMN_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("DATA_TYPE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("SOURCE_DATA_TYPE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("TYPE_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getLong("COLUMN_SIZE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("NULLABLE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("DECIMAL_DIGITS");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.wasNull();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("NUM_PREC_RADIX");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("COLUMN_DEF");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("REMARKS");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getLong("CHAR_OCTET_LENGTH");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getInt("ORDINAL_POSITION");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("IS_AUTOINCREMENT");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.getString("IS_GENERATEDCOLUMN");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs41.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/prep34.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/Statement stat5 = conn1.createStatement(1003, 1007);
2021-02-24 12:16:36 jdbc[3]: 
/**/stat5.setMaxRows(200);
2021-02-24 12:16:36 jdbc[3]: 
/**/stat5.execute("SELECT * FROM PUBLIC.PERMISSION");
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [PUBLIC.PERMISSION]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter PUBLIC.PERMISSION
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,230 index PUBLIC.PERMISSION.tableScan
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,070 index PUBLIC.PERMISSION_ID_NAME_INDEX
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 10,070 index PUBLIC.PERMISSION_ID_NAME_INDEX
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 10,071
2021-02-24 12:16:36 jdbc[3]: 
/*SQL #:3*/SELECT * FROM PUBLIC.PERMISSION;
2021-02-24 12:16:36 jdbc[3]: 
/**/ResultSet rs42 = stat5.getResultSet();
2021-02-24 12:16:36 jdbc[3]: 
/**/ResultSetMetaData rsMeta4 = rs42.getMetaData();
2021-02-24 12:16:36 jdbc[3]: 
/**/conn1.getCatalog();
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnCount();
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnLabel(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnName(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.isWritable(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getTableName(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getCatalogName(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getSchemaName(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.isNullable(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnDisplaySize(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnTypeName(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnType(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.isAutoIncrement(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getPrecision(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getScale(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnLabel(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnName(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.isWritable(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getTableName(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getCatalogName(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getSchemaName(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.isNullable(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnDisplaySize(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnTypeName(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getColumnType(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.isAutoIncrement(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getPrecision(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rsMeta4.getScale(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.getLong(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.wasNull();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.getObject(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.getLong(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.wasNull();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.getObject(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.getLong(1);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.wasNull();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.getObject(2);
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs42.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/DatabaseMetaData dbMeta29 = conn1.getMetaData();
2021-02-24 12:16:36 jdbc[3]: 
/**/dbMeta29.getIndexInfo(null, "PUBLIC", "PERMISSION", false, true);
2021-02-24 12:16:36 jdbc[3]: 
/**/PreparedStatement prep35 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep35.setString(1, "%");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep35.setString(2, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep35.setString(3, "PUBLIC");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep35.setString(4, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep35.setString(5, "PERMISSION");
2021-02-24 12:16:36 jdbc[3]: 
/**/ResultSet rs43 = prep35.executeQuery();
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 322.44
2021-02-24 12:16:36 jdbc[3]: 
/*SQL l:433 #:2*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'PERMISSION'};
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("INDEX_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getBoolean("NON_UNIQUE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("INDEX_QUALIFIER");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getLong("CARDINALITY");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getInt("TYPE");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getInt("ORDINAL_POSITION");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("COLUMN_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("ASC_OR_DESC");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("INDEX_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getInt("ORDINAL_POSITION");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("COLUMN_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.getString("ASC_OR_DESC");
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs43.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/prep35.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/DatabaseMetaData dbMeta30 = conn1.getMetaData();
2021-02-24 12:16:36 jdbc[3]: 
/**/dbMeta30.getPrimaryKeys(null, "PUBLIC", "PERMISSION");
2021-02-24 12:16:36 jdbc[3]: 
/**/PreparedStatement prep36 = conn1.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep36.setString(1, "%");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep36.setString(2, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep36.setString(3, "PUBLIC");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep36.setString(4, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep36.setString(5, "PERMISSION");
2021-02-24 12:16:36 jdbc[3]: 
/**/ResultSet rs44 = prep36.executeQuery();
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@c4ea516]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@c4ea516
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 318.16 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 319.16
2021-02-24 12:16:36 jdbc[3]: 
/*SQL l:316*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'PERMISSION'};
2021-02-24 12:16:36 jdbc[3]: 
/**/rs44.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs44.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/prep36.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/DatabaseMetaData dbMeta31 = conn1.getMetaData();
2021-02-24 12:16:36 jdbc[3]: 
/**/dbMeta31.getImportedKeys(null, "PUBLIC", "PERMISSION");
2021-02-24 12:16:36 jdbc[3]: 
/**/PreparedStatement prep37 = conn1.prepareStatement("SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep37.setString(1, "%");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep37.setString(2, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep37.setString(3, "PUBLIC");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep37.setString(4, "\\");
2021-02-24 12:16:36 jdbc[3]: 
/**/prep37.setString(5, "PERMISSION");
2021-02-24 12:16:36 jdbc[3]: 
/**/ResultSet rs45 = prep37.executeQuery();
2021-02-24 12:16:36 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918]
2021-02-24 12:16:36 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@4d538918
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-02-24 12:16:36 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       :   best plan item cost 4,235.56 index meta
2021-02-24 12:16:36 jdbc[3]: Plan       : plan cost 4,236.56
2021-02-24 12:16:36 jdbc[3]: 
/*SQL l:482*/SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'PERMISSION'};
2021-02-24 12:16:36 jdbc[3]: 
/**/rs45.next();
2021-02-24 12:16:36 jdbc[3]: 
/**/rs45.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/prep37.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/stat5.close();
2021-02-24 12:16:36 jdbc[3]: 
/**/conn1.getWarnings();
2021-02-24 12:16:36 jdbc[3]: 
/**/conn1.clearWarnings();
2021-02-25 11:20:12 jdbc[3]: 
/**/Statement stat6 = conn1.createStatement();
2021-02-25 11:20:12 jdbc[3]: 
/**/stat6.execute("shutdown");
2021-02-25 11:20:12 lock: 3 shared read lock unlock SYS 
2021-02-25 11:20:12 database: disconnecting session #3
2021-02-25 11:20:12 database: closing /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-02-25 11:20:12 lock: 1 shared read lock unlock SYS 
2021-02-25 11:20:12 lock: 2 shared read lock unlock SYS 
2021-02-25 11:20:12 database: closed
2021-02-25 11:20:12 database: disconnected session #3
2021-02-25 11:20:12 command: slow query: 269 ms
2021-02-25 11:20:12 jdbc[3]: 
/**/stat6.close();
2021-02-25 11:20:12 jdbc[3]: 
/**/conn1.isClosed();
2021-02-25 11:20:12 jdbc[3]: 
/**/conn1.close();
2021-03-02 10:15:48 database: opening /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database (build 200)
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ENGINEPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for WORKSPACEENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for WORKSPACEENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock WORKSPACEENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for WORKSPACEENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for WORKSPACEENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock WORKSPACEENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ASSETENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ASSETENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ASSETENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for ASSETENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for ASSETENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock ASSETENGINE 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock USERINSIGHTPERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock INSIGHT 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for USER 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for USER 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock USER 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for PERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for PERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock PERMISSION 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock requesting for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock added for SYS 
2021-03-02 10:15:48 lock: 1 exclusive write lock unlock SYS 
2021-03-02 10:15:48 database: opened /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-03-02 10:15:48 database: connecting session #3 to /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-03-02 10:15:48 jdbc[3]: 
/*SQL */SET TRACE_LEVEL_FILE 3;
2021-03-02 10:15:48 jdbc[3]: 
/**/Connection conn0 = DriverManager.getConnection("jdbc:h2:/Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database", "SA", "");
2021-03-02 10:15:48 jdbc[3]: 
/**/DatabaseMetaData dbMeta0 = conn0.getMetaData();
2021-03-02 10:15:48 jdbc[3]: 
/**/conn0.getClientInfo();
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs0 = dbMeta0.getClientInfoProperties();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs0.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs0.getString("NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs0.getInt("MAX_LEN");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs0.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs0.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/conn0.setClientInfo("ApplicationName", "DBeaver 7.3.0 - Main");
2021-03-02 10:15:48 jdbc[3]: 
/**/conn0.getClientInfo("ApplicationName");
2021-03-02 10:15:48 jdbc[3]: 
/**/conn0.getClientInfo();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep0 = conn0.prepareStatement("SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?)");
2021-03-02 10:15:48 jdbc[3]: Plan       : calculate cost for plan [SETTINGS:-7:org.h2.table.MetaTable@31c65dc4]
2021-03-02 10:15:48 jdbc[3]: Plan       :   for table filter SETTINGS:-7:org.h2.table.MetaTable@31c65dc4
2021-03-02 10:15:48 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       : plan cost 9,901
2021-03-02 10:15:48 jdbc[3]: 
/**/prep0.setString(1, "MODE");
2021-03-02 10:15:48 jdbc[3]: 
/**/prep0.setString(2, "DATABASE_TO_UPPER");
2021-03-02 10:15:48 jdbc[3]: 
/**/prep0.setString(3, "DATABASE_TO_LOWER");
2021-03-02 10:15:48 jdbc[3]: 
/**/prep0.setString(4, "CASE_INSENSITIVE_IDENTIFIERS");
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs1 = prep0.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL l:78 #:4 t:12*/SELECT NAME, VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME IN (?, ?, ?, ?) {1: 'MODE', 2: 'DATABASE_TO_UPPER', 3: 'DATABASE_TO_LOWER', 4: 'CASE_INSENSITIVE_IDENTIFIERS'};
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(2);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(2);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(2);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(2);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs1.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep0.close();
2021-03-02 10:15:48 jdbc[3]: exception
java.sql.SQLClientInfoException: Client info name 'ApplicationName' not supported.
	at org.h2.jdbc.JdbcConnection.setClientInfo(JdbcConnection.java:1749)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.populateClientAppName(GenericDataSource.java:164)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.openConnection(GenericDataSource.java:127)
	at org.jkiss.dbeaver.ext.h2.model.H2DataSource.openConnection(H2DataSource.java:74)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext.connect(JDBCExecutionContext.java:101)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.initializeMainContext(JDBCRemoteInstance.java:95)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCRemoteInstance.<init>(JDBCRemoteInstance.java:57)
	at org.jkiss.dbeaver.model.impl.jdbc.JDBCDataSource.initializeRemoteInstance(JDBCDataSource.java:110)
	at org.jkiss.dbeaver.ext.generic.model.GenericDataSource.<init>(GenericDataSource.java:106)
	at org.jkiss.dbeaver.ext.h2.model.H2DataSource.<init>(H2DataSource.java:43)
	at org.jkiss.dbeaver.ext.h2.model.H2MetaModel.createDataSourceImpl(H2MetaModel.java:47)
	at org.jkiss.dbeaver.ext.generic.GenericDataSourceProvider.openDataSource(GenericDataSourceProvider.java:106)
	at org.jkiss.dbeaver.registry.DataSourceDescriptor.connect(DataSourceDescriptor.java:880)
	at org.jkiss.dbeaver.ui.editors.DatabaseLazyEditorInput.initializeRealInput(DatabaseLazyEditorInput.java:220)
	at org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:133)
	at org.jkiss.dbeaver.ui.editors.ProgressEditorPart$InitNodeService.evaluate(ProgressEditorPart.java:1)
	at org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:88)
	at org.jkiss.dbeaver.ui.LoadingJob.run(LoadingJob.java:72)
	at org.jkiss.dbeaver.model.runtime.AbstractJob.run(AbstractJob.java:105)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
2021-03-02 10:15:48 jdbc[3]: 
/**/conn0.setAutoCommit(true);
2021-03-02 10:15:48 jdbc[3]: 
/**/conn0.getAutoCommit();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep1 = conn0.prepareStatement("SELECT SCHEMA()");
2021-03-02 10:15:48 jdbc[3]: Plan       : calculate cost for plan [DUAL:0:org.h2.table.DualTable@65839073]
2021-03-02 10:15:48 jdbc[3]: Plan       :   for table filter DUAL:0:org.h2.table.DualTable@65839073
2021-03-02 10:15:48 jdbc[3]: Table      :     potential plan item cost 1 index dual index
2021-03-02 10:15:48 jdbc[3]: Plan       :   best plan item cost 1 index dual index
2021-03-02 10:15:48 jdbc[3]: Plan       : plan cost 2
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs2 = prep1.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL #:1*/SELECT SCHEMA();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs2.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs2.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs2.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep1.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/DatabaseMetaData dbMeta1 = conn0.getMetaData();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getIdentifierQuoteString();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getSQLStateType();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsCorrelatedSubqueries();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsMixedCaseIdentifiers();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsMixedCaseQuotedIdentifiers();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.storesUpperCaseIdentifiers();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.storesUpperCaseQuotedIdentifiers();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.storesLowerCaseQuotedIdentifiers();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getSearchStringEscape();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getCatalogSeparator();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInDataManipulation();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInTableDefinitions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInProcedureCalls();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInIndexDefinitions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsCatalogsInPrivilegeDefinitions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsSchemasInDataManipulation();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsSchemasInTableDefinitions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsSchemasInProcedureCalls();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsSchemasInIndexDefinitions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsSchemasInPrivilegeDefinitions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getExtraNameCharacters();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.isCatalogAtStart();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getSQLKeywords();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getNumericFunctions();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep2 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-03-02 10:15:48 jdbc[3]: Plan       : calculate cost for plan [HELP:-8:org.h2.table.MetaTable@331f175c]
2021-03-02 10:15:48 jdbc[3]: Plan       :   for table filter HELP:-8:org.h2.table.MetaTable@331f175c
2021-03-02 10:15:48 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       :   best plan item cost 9,900 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       : plan cost 9,901
2021-03-02 10:15:48 jdbc[3]: 
/**/prep2.setString(1, "Functions (Numeric)");
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs3 = prep2.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL l:59 #:45 t:41*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (Numeric)'};
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs3.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep2.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep2.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getStringFunctions();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep3 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-03-02 10:15:48 jdbc[3]: 
/**/prep3.setString(1, "Functions (String)");
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs4 = prep3.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL l:59 #:43 t:6*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (String)'};
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs4.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep3.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep3.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getSystemFunctions();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep4 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-03-02 10:15:48 jdbc[3]: 
/**/prep4.setString(1, "Functions (System)");
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs5 = prep4.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL l:59 #:47 t:4*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (System)'};
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs5.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep4.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep4.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getTimeDateFunctions();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep5 = conn0.prepareStatement("SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ?");
2021-03-02 10:15:48 jdbc[3]: 
/**/prep5.setString(1, "Functions (Time and Date)");
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs6 = prep5.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL l:59 #:25 t:3*/SELECT TOPIC FROM INFORMATION_SCHEMA.HELP WHERE SECTION = ? {1: 'Functions (Time and Date)'};
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.getString(1);
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs6.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep5.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep5.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDatabaseProductName();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDatabaseProductVersion();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDriverName();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDriverVersion();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDatabaseMajorVersion();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getDatabaseMinorVersion();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getSchemaTerm();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getProcedureTerm();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.getCatalogTerm();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsBatchUpdates();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsTransactions();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta1.supportsTransactionIsolationLevel();
2021-03-02 10:15:48 jdbc[3]: 
/**/DatabaseMetaData dbMeta2 = conn0.getMetaData();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta2.getTypeInfo();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep6 = conn0.prepareStatement("SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS");
2021-03-02 10:15:48 jdbc[3]: Plan       : calculate cost for plan [TYPE_INFO:-5:org.h2.table.MetaTable@4c6ec24c]
2021-03-02 10:15:48 jdbc[3]: Plan       :   for table filter TYPE_INFO:-5:org.h2.table.MetaTable@4c6ec24c
2021-03-02 10:15:48 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       : plan cost 10,001
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs7 = prep6.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL #:46 t:2*/SELECT TYPE_NAME, DATA_TYPE, PRECISION, PREFIX LITERAL_PREFIX, SUFFIX LITERAL_SUFFIX, PARAMS CREATE_PARAMS, NULLABLE, CASE_SENSITIVE, SEARCHABLE, FALSE UNSIGNED_ATTRIBUTE, FALSE FIXED_PREC_SCALE, AUTO_INCREMENT, TYPE_NAME LOCAL_TYPE_NAME, MINIMUM_SCALE, MAXIMUM_SCALE, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, RADIX NUM_PREC_RADIX FROM INFORMATION_SCHEMA.TYPE_INFO ORDER BY DATA_TYPE, POS;
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("DATA_TYPE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getString("LOCAL_TYPE_NAME");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getBoolean("UNSIGNED_ATTRIBUTE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("SEARCHABLE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("PRECISION");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MINIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.getInt("MAXIMUM_SCALE");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs7.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep6.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/DatabaseMetaData dbMeta3 = conn0.getMetaData();
2021-03-02 10:15:48 jdbc[3]: 
/**/DatabaseMetaData dbMeta4 = conn0.getMetaData();
2021-03-02 10:15:48 jdbc[3]: 
/**/dbMeta4.getSchemas();
2021-03-02 10:15:48 jdbc[3]: 
/**/PreparedStatement prep7 = conn0.prepareStatement("SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME");
2021-03-02 10:15:48 jdbc[3]: Plan       : calculate cost for plan [SCHEMATA:-14:org.h2.table.MetaTable@471040f6]
2021-03-02 10:15:48 jdbc[3]: Plan       :   for table filter SCHEMATA:-14:org.h2.table.MetaTable@471040f6
2021-03-02 10:15:48 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       :   best plan item cost 10,000 index meta
2021-03-02 10:15:48 jdbc[3]: Plan       : plan cost 10,001
2021-03-02 10:15:48 jdbc[3]: 
/**/ResultSet rs8 = prep7.executeQuery();
2021-03-02 10:15:48 jdbc[3]: 
/*SQL #:2*/SELECT SCHEMA_NAME TABLE_SCHEM, CATALOG_NAME TABLE_CATALOG,  IS_DEFAULT FROM INFORMATION_SCHEMA.SCHEMATA ORDER BY SCHEMA_NAME;
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.getString("TABLE_SCHEM");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.getString("TABLE_CATALOG");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.getString("TABLE_SCHEM");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.getString("TABLE_CATALOG");
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.next();
2021-03-02 10:15:48 jdbc[3]: 
/**/rs8.close();
2021-03-02 10:15:48 jdbc[3]: 
/**/prep7.close();
2021-03-02 10:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta5 = conn0.getMetaData();
2021-03-02 10:15:49 jdbc[3]: 
/**/dbMeta5.getTables(null, "PUBLIC", "%", null);
2021-03-02 10:15:49 jdbc[3]: 
/**/PreparedStatement prep8 = conn0.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [_0]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter _0
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@713c050d]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@713c050d
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@46ef9a6f]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@46ef9a6f
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@713c050d]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@713c050d
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@46ef9a6f]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@46ef9a6f
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@713c050d]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@713c050d
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@46ef9a6f]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@46ef9a6f
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 8,046 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4)))
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 8,047
2021-03-02 10:15:49 jdbc[3]: 
/**/prep8.setString(1, "%");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep8.setString(2, "PUBLIC");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep8.setString(3, "%");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep8.setString(4, "\\");
2021-03-02 10:15:49 jdbc[3]: 
/**/ResultSet rs9 = prep8.executeQuery();
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [_1]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter _1
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@713c050d]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@713c050d
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@46ef9a6f]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@46ef9a6f
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@713c050d]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@713c050d
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@46ef9a6f]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@46ef9a6f
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [SYNONYMS:-30:org.h2.table.MetaTable@713c050d]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter SYNONYMS:-30:org.h2.table.MetaTable@713c050d
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [TABLES:-1:org.h2.table.MetaTable@46ef9a6f]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter TABLES:-1:org.h2.table.MetaTable@46ef9a6f
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 8,046 index (SELECT
    SYNONYM_CATALOG AS TABLE_CAT,
    SYNONYM_SCHEMA AS TABLE_SCHEM,
    SYNONYM_NAME AS TABLE_NAME,
    TYPE_NAME AS TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME AS TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    NULL AS SQL
FROM INFORMATION_SCHEMA.SYNONYMS
    /* meta */
WHERE (SYNONYM_NAME LIKE ?3 ESCAPE ?4)
    AND ((SYNONYM_CATALOG LIKE ?1 ESCAPE ?4)
    AND (SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4)))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    TABLE_TYPE,
    REMARKS,
    TYPE_NAME AS TYPE_CAT,
    TYPE_NAME AS TYPE_SCHEM,
    TYPE_NAME,
    TYPE_NAME AS SELF_REFERENCING_COL_NAME,
    TYPE_NAME AS REF_GENERATION,
    SQL
FROM INFORMATION_SCHEMA.TABLES
    /* meta */
WHERE (TABLE_NAME LIKE ?3 ESCAPE ?4)
    AND ((TABLE_CATALOG LIKE ?1 ESCAPE ?4)
    AND (TABLE_SCHEMA LIKE ?2 ESCAPE ?4)))
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 8,047
2021-03-02 10:15:49 jdbc[3]: 
/*SQL l:959 #:11 t:3*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_CAT, TYPE_SCHEM, TYPE_NAME, SELF_REFERENCING_COL_NAME, REF_GENERATION, SQL FROM (SELECT SYNONYM_CATALOG TABLE_CAT, SYNONYM_SCHEMA TABLE_SCHEM, SYNONYM_NAME as TABLE_NAME, TYPE_NAME AS TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME AS TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, NULL AS SQL FROM INFORMATION_SCHEMA.SYNONYMS WHERE SYNONYM_CATALOG LIKE ?1 ESCAPE ?4 AND SYNONYM_SCHEMA LIKE ?2 ESCAPE ?4 AND SYNONYM_NAME LIKE ?3 ESCAPE ?4 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, TABLE_TYPE, REMARKS, TYPE_NAME TYPE_CAT, TYPE_NAME TYPE_SCHEM, TYPE_NAME, TYPE_NAME SELF_REFERENCING_COL_NAME, TYPE_NAME REF_GENERATION, SQL FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_CATALOG LIKE ?1 ESCAPE ?4 AND TABLE_SCHEMA LIKE ?2 ESCAPE ?4 AND TABLE_NAME LIKE ?3 ESCAPE ?4) ORDER BY TABLE_TYPE, TABLE_SCHEM, TABLE_NAME {1: '%', 2: 'PUBLIC', 3: '%', 4: '\\'};
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_NAME");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_TYPE");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("TABLE_SCHEM");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.getString("REMARKS");
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.next();
2021-03-02 10:15:49 jdbc[3]: 
/**/rs9.close();
2021-03-02 10:15:49 jdbc[3]: 
/**/prep8.close();
2021-03-02 10:15:49 jdbc[3]: 
/**/DatabaseMetaData dbMeta6 = conn0.getMetaData();
2021-03-02 10:15:49 jdbc[3]: 
/**/dbMeta6.getColumns(null, "PUBLIC", "PERMISSION", "%");
2021-03-02 10:15:49 jdbc[3]: 
/**/PreparedStatement prep9 = conn0.prepareStatement("SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION");
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [_2]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter _2
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 113,230.323
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@252294c4]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@252294c4
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 113,230.323
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@252294c4]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@252294c4
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 113,230.323
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-03-02 10:15:49 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@252294c4]
2021-03-02 10:15:49 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@252294c4
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:49 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:49 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-03-02 10:15:49 jdbc[3]: Plan       : plan cost 117,254.323
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(1, "NO");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(2, "YES");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(3, "%");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(4, "PUBLIC");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(5, "PERMISSION");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(6, "%");
2021-03-02 10:15:49 jdbc[3]: 
/**/prep9.setString(7, "\\");
2021-03-02 10:15:49 jdbc[3]: 
/**/ResultSet rs10 = prep9.executeQuery();
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [_3]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter _3
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 113,230.323
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@252294c4]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@252294c4
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 113,230.323
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@252294c4]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@252294c4
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [S, C]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 28 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 27.72 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 113,230.323
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [C, S]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter C
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,941.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter S
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 3,981.78 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 15,702,349.117
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [COLUMNS:-2:org.h2.table.MetaTable@252294c4]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter COLUMNS:-2:org.h2.table.MetaTable@252294c4
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 4,022 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 4,023
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 117,253.323 index (SELECT
    S.SYNONYM_CATALOG AS TABLE_CAT,
    S.SYNONYM_SCHEMA AS TABLE_SCHEM,
    S.SYNONYM_NAME AS TABLE_NAME,
    C.COLUMN_NAME,
    C.DATA_TYPE,
    C.TYPE_NAME,
    C.CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    C.CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    C.NUMERIC_SCALE AS DECIMAL_DIGITS,
    C.NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    C.NULLABLE,
    C.REMARKS,
    C.COLUMN_DEFAULT AS COLUMN_DEF,
    C.DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    C.CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    C.ORDINAL_POSITION,
    C.IS_NULLABLE AS IS_NULLABLE,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(C.SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    C.SOURCE_DATA_TYPE,
    CASE WHEN (C.SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN C.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.SYNONYMS S
    /* meta */
    /* WHERE (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)
        AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
        AND (S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7))
    */
INNER JOIN INFORMATION_SCHEMA.COLUMNS C
    /* meta: TABLE_NAME = S.SYNONYM_FOR */
    ON 1=1
WHERE ((S.SYNONYM_FOR = C.TABLE_NAME)
    AND (S.SYNONYM_FOR_SCHEMA = C.TABLE_SCHEMA))
    AND ((C.COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((S.SYNONYM_NAME LIKE ?5 ESCAPE ?7)
    AND ((S.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7)
    AND (S.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7)))))
UNION
(SELECT
    TABLE_CATALOG AS TABLE_CAT,
    TABLE_SCHEMA AS TABLE_SCHEM,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    TYPE_NAME,
    CHARACTER_MAXIMUM_LENGTH AS COLUMN_SIZE,
    CHARACTER_MAXIMUM_LENGTH AS BUFFER_LENGTH,
    NUMERIC_SCALE AS DECIMAL_DIGITS,
    NUMERIC_PRECISION_RADIX AS NUM_PREC_RADIX,
    NULLABLE,
    REMARKS,
    COLUMN_DEFAULT AS COLUMN_DEF,
    DATA_TYPE AS SQL_DATA_TYPE,
    0 AS SQL_DATETIME_SUB,
    CHARACTER_OCTET_LENGTH AS CHAR_OCTET_LENGTH,
    ORDINAL_POSITION,
    IS_NULLABLE AS IS_NULLABLE,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_CATALOG,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_SCHEMA,
    CAST(SOURCE_DATA_TYPE AS VARCHAR) AS SCOPE_TABLE,
    SOURCE_DATA_TYPE,
    CASE WHEN (SEQUENCE_NAME IS NULL) THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END AS IS_AUTOINCREMENT,
    CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END AS IS_GENERATEDCOLUMN
FROM INFORMATION_SCHEMA.COLUMNS
    /* meta */
WHERE (COLUMN_NAME LIKE ?6 ESCAPE ?7)
    AND ((TABLE_NAME LIKE ?5 ESCAPE ?7)
    AND ((TABLE_CATALOG LIKE ?3 ESCAPE ?7)
    AND (TABLE_SCHEMA LIKE ?4 ESCAPE ?7))))
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 117,254.323
2021-03-02 10:15:50 jdbc[3]: 
/*SQL l:2534 #:2 t:11*/SELECT TABLE_CAT, TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, COLUMN_SIZE, BUFFER_LENGTH, DECIMAL_DIGITS, NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEF, SQL_DATA_TYPE, SQL_DATETIME_SUB, CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE, SCOPE_CATALOG, SCOPE_SCHEMA, SCOPE_TABLE, SOURCE_DATA_TYPE, IS_AUTOINCREMENT, IS_GENERATEDCOLUMN FROM (SELECT s.SYNONYM_CATALOG TABLE_CAT, s.SYNONYM_SCHEMA TABLE_SCHEM, s.SYNONYM_NAME TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, c.TYPE_NAME, c.CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, c.CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, c.NUMERIC_SCALE DECIMAL_DIGITS, c.NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, c.NULLABLE, c.REMARKS, c.COLUMN_DEFAULT COLUMN_DEF, c.DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, c.CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, c.ORDINAL_POSITION, c.IS_NULLABLE IS_NULLABLE, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(c.SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, c.SOURCE_DATA_TYPE, CASE WHEN c.SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN c.IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS c JOIN INFORMATION_SCHEMA.SYNONYMS s ON s.SYNONYM_FOR = c.TABLE_NAME AND s.SYNONYM_FOR_SCHEMA = c.TABLE_SCHEMA WHERE s.SYNONYM_CATALOG LIKE ?3 ESCAPE ?7 AND s.SYNONYM_SCHEMA LIKE ?4 ESCAPE ?7 AND s.SYNONYM_NAME LIKE ?5 ESCAPE ?7 AND c.COLUMN_NAME LIKE ?6 ESCAPE ?7 UNION SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, DATA_TYPE, TYPE_NAME, CHARACTER_MAXIMUM_LENGTH COLUMN_SIZE, CHARACTER_MAXIMUM_LENGTH BUFFER_LENGTH, NUMERIC_SCALE DECIMAL_DIGITS, NUMERIC_PRECISION_RADIX NUM_PREC_RADIX, NULLABLE, REMARKS, COLUMN_DEFAULT COLUMN_DEF, DATA_TYPE SQL_DATA_TYPE, ZERO() SQL_DATETIME_SUB, CHARACTER_OCTET_LENGTH CHAR_OCTET_LENGTH, ORDINAL_POSITION, IS_NULLABLE IS_NULLABLE, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_CATALOG, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_SCHEMA, CAST(SOURCE_DATA_TYPE AS VARCHAR) SCOPE_TABLE, SOURCE_DATA_TYPE, CASE WHEN SEQUENCE_NAME IS NULL THEN CAST(?1 AS VARCHAR) ELSE CAST(?2 AS VARCHAR) END IS_AUTOINCREMENT, CASE WHEN IS_COMPUTED THEN CAST(?2 AS VARCHAR) ELSE CAST(?1 AS VARCHAR) END IS_GENERATEDCOLUMN FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_CATALOG LIKE ?3 ESCAPE ?7 AND TABLE_SCHEMA LIKE ?4 ESCAPE ?7 AND TABLE_NAME LIKE ?5 ESCAPE ?7 AND COLUMN_NAME LIKE ?6 ESCAPE ?7) ORDER BY TABLE_SCHEM, TABLE_NAME, ORDINAL_POSITION {1: 'NO', 2: 'YES', 3: '%', 4: 'PUBLIC', 5: 'PERMISSION', 6: '%', 7: '\\'};
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.wasNull();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("COLUMN_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("DATA_TYPE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("SOURCE_DATA_TYPE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("TYPE_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getLong("COLUMN_SIZE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("NULLABLE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("DECIMAL_DIGITS");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.wasNull();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("NUM_PREC_RADIX");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("COLUMN_DEF");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("REMARKS");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getLong("CHAR_OCTET_LENGTH");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getInt("ORDINAL_POSITION");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("IS_AUTOINCREMENT");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.getString("IS_GENERATEDCOLUMN");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs10.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/prep9.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/Statement stat0 = conn0.createStatement(1003, 1007);
2021-03-02 10:15:50 jdbc[3]: 
/**/stat0.setMaxRows(200);
2021-03-02 10:15:50 jdbc[3]: 
/**/stat0.execute("SELECT * FROM PUBLIC.PERMISSION");
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [PUBLIC.PERMISSION]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter PUBLIC.PERMISSION
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,230 index PUBLIC.PERMISSION.tableScan
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,070 index PUBLIC.PERMISSION_ID_NAME_INDEX
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 10,070 index PUBLIC.PERMISSION_ID_NAME_INDEX
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 10,071
2021-03-02 10:15:50 jdbc[3]: 
/*SQL #:3 t:1*/SELECT * FROM PUBLIC.PERMISSION;
2021-03-02 10:15:50 jdbc[3]: 
/**/ResultSet rs11 = stat0.getResultSet();
2021-03-02 10:15:50 jdbc[3]: 
/**/ResultSetMetaData rsMeta0 = rs11.getMetaData();
2021-03-02 10:15:50 jdbc[3]: 
/**/conn0.getCatalog();
2021-03-02 10:15:50 jdbc[3]: 
/*SQL #:1*/CALL DATABASE();
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnCount();
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnLabel(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnName(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.isWritable(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getTableName(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getCatalogName(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getSchemaName(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.isNullable(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnType(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getPrecision(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getScale(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnLabel(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnName(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.isWritable(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getTableName(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getCatalogName(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getSchemaName(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.isNullable(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnDisplaySize(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnTypeName(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getColumnType(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.isAutoIncrement(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getPrecision(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rsMeta0.getScale(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.getLong(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.wasNull();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.getObject(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.getLong(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.wasNull();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.getObject(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.getLong(1);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.wasNull();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.getObject(2);
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs11.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/DatabaseMetaData dbMeta7 = conn0.getMetaData();
2021-03-02 10:15:50 jdbc[3]: 
/**/dbMeta7.getIndexInfo(null, "PUBLIC", "PERMISSION", false, true);
2021-03-02 10:15:50 jdbc[3]: 
/**/PreparedStatement prep10 = conn0.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION");
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@68ba6151]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@68ba6151
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 324.72 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 325.72
2021-03-02 10:15:50 jdbc[3]: 
/**/prep10.setString(1, "%");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep10.setString(2, "\\");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep10.setString(3, "PUBLIC");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep10.setString(4, "\\");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep10.setString(5, "PERMISSION");
2021-03-02 10:15:50 jdbc[3]: 
/**/ResultSet rs12 = prep10.executeQuery();
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@68ba6151]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@68ba6151
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 322.44
2021-03-02 10:15:50 jdbc[3]: 
/*SQL l:433 #:2*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, NON_UNIQUE, TABLE_CATALOG INDEX_QUALIFIER, INDEX_NAME, INDEX_TYPE TYPE, ORDINAL_POSITION, COLUMN_NAME, ASC_OR_DESC, CARDINALITY, PAGES, FILTER_CONDITION, SORT_TYPE FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND (TRUE) AND TABLE_NAME = ? ORDER BY NON_UNIQUE, TYPE, TABLE_SCHEM, INDEX_NAME, ORDINAL_POSITION {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'PERMISSION'};
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("INDEX_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getBoolean("NON_UNIQUE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("INDEX_QUALIFIER");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getLong("CARDINALITY");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getInt("TYPE");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getInt("ORDINAL_POSITION");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("COLUMN_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("ASC_OR_DESC");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("INDEX_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getInt("ORDINAL_POSITION");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("COLUMN_NAME");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.getString("ASC_OR_DESC");
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs12.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/prep10.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/DatabaseMetaData dbMeta8 = conn0.getMetaData();
2021-03-02 10:15:50 jdbc[3]: 
/**/dbMeta8.getPrimaryKeys(null, "PUBLIC", "PERMISSION");
2021-03-02 10:15:50 jdbc[3]: 
/**/PreparedStatement prep11 = conn0.prepareStatement("SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME");
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@68ba6151]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@68ba6151
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 321.44 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 322.44
2021-03-02 10:15:50 jdbc[3]: 
/**/prep11.setString(1, "%");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep11.setString(2, "\\");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep11.setString(3, "PUBLIC");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep11.setString(4, "\\");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep11.setString(5, "PERMISSION");
2021-03-02 10:15:50 jdbc[3]: 
/**/ResultSet rs13 = prep11.executeQuery();
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [INDEXES:-3:org.h2.table.MetaTable@68ba6151]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter INDEXES:-3:org.h2.table.MetaTable@68ba6151
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 328 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 318.16 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 319.16
2021-03-02 10:15:50 jdbc[3]: 
/*SQL l:316*/SELECT TABLE_CATALOG TABLE_CAT, TABLE_SCHEMA TABLE_SCHEM, TABLE_NAME, COLUMN_NAME, ORDINAL_POSITION KEY_SEQ, IFNULL(CONSTRAINT_NAME, INDEX_NAME) PK_NAME FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_CATALOG LIKE ? ESCAPE ? AND TABLE_SCHEMA LIKE ? ESCAPE ? AND TABLE_NAME = ? AND PRIMARY_KEY = TRUE ORDER BY COLUMN_NAME {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'PERMISSION'};
2021-03-02 10:15:50 jdbc[3]: 
/**/rs13.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs13.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/prep11.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/DatabaseMetaData dbMeta9 = conn0.getMetaData();
2021-03-02 10:15:50 jdbc[3]: 
/**/dbMeta9.getImportedKeys(null, "PUBLIC", "PERMISSION");
2021-03-02 10:15:50 jdbc[3]: 
/**/PreparedStatement prep12 = conn0.prepareStatement("SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ");
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@1bcd29e1]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@1bcd29e1
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 4,278.78 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 4,279.78
2021-03-02 10:15:50 jdbc[3]: 
/**/prep12.setString(1, "%");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep12.setString(2, "\\");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep12.setString(3, "PUBLIC");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep12.setString(4, "\\");
2021-03-02 10:15:50 jdbc[3]: 
/**/prep12.setString(5, "PERMISSION");
2021-03-02 10:15:50 jdbc[3]: 
/**/ResultSet rs14 = prep12.executeQuery();
2021-03-02 10:15:50 jdbc[3]: Plan       : calculate cost for plan [CROSS_REFERENCES:-20:org.h2.table.MetaTable@1bcd29e1]
2021-03-02 10:15:50 jdbc[3]: Plan       :   for table filter CROSS_REFERENCES:-20:org.h2.table.MetaTable@1bcd29e1
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 10,000 index meta
2021-03-02 10:15:50 jdbc[3]: Table      :     potential plan item cost 4,322 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       :   best plan item cost 4,235.56 index meta
2021-03-02 10:15:50 jdbc[3]: Plan       : plan cost 4,236.56
2021-03-02 10:15:50 jdbc[3]: 
/*SQL l:482*/SELECT PKTABLE_CATALOG PKTABLE_CAT, PKTABLE_SCHEMA PKTABLE_SCHEM, PKTABLE_NAME PKTABLE_NAME, PKCOLUMN_NAME, FKTABLE_CATALOG FKTABLE_CAT, FKTABLE_SCHEMA FKTABLE_SCHEM, FKTABLE_NAME, FKCOLUMN_NAME, ORDINAL_POSITION KEY_SEQ, UPDATE_RULE, DELETE_RULE, FK_NAME, PK_NAME, DEFERRABILITY FROM INFORMATION_SCHEMA.CROSS_REFERENCES WHERE FKTABLE_CATALOG LIKE ? ESCAPE ? AND FKTABLE_SCHEMA LIKE ? ESCAPE ? AND FKTABLE_NAME = ? ORDER BY PKTABLE_CAT, PKTABLE_SCHEM, PKTABLE_NAME, FK_NAME, KEY_SEQ {1: '%', 2: '\\', 3: 'PUBLIC', 4: '\\', 5: 'PERMISSION'};
2021-03-02 10:15:50 jdbc[3]: 
/**/rs14.next();
2021-03-02 10:15:50 jdbc[3]: 
/**/rs14.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/prep12.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/stat0.close();
2021-03-02 10:15:50 jdbc[3]: 
/**/conn0.getWarnings();
2021-03-02 10:15:50 jdbc[3]: 
/**/conn0.clearWarnings();
2021-03-02 10:15:50 jdbc[3]: 
/**/conn0.getTransactionIsolation();
2021-03-02 14:29:59 jdbc[3]: 
/**/Statement stat21 = conn0.createStatement();
2021-03-02 14:29:59 jdbc[3]: 
/**/stat21.execute("shutdown");
2021-03-02 14:29:59 lock: 3 shared read lock unlock SYS 
2021-03-02 14:29:59 database: disconnecting session #3
2021-03-02 14:29:59 database: closing /Users/semoss/Documents/Daily_Notes/SEMOSS_Config_Databases/Security/database
2021-03-02 14:29:59 lock: 1 shared read lock unlock SYS 
2021-03-02 14:29:59 lock: 2 shared read lock unlock SYS 
2021-03-02 14:29:59 database: closed
2021-03-02 14:29:59 database: disconnected session #3
2021-03-02 14:29:59 command: slow query: 466 ms
2021-03-02 14:29:59 jdbc[3]: 
/**/stat21.close();
2021-03-02 14:29:59 jdbc[3]: 
/**/conn0.isClosed();
2021-03-02 14:29:59 jdbc[3]: 
/**/conn0.close();
